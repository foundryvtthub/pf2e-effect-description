{"version":3,"file":"main.js","mappings":"mBAAO,IAAI,EAAY,GCEhB,SAAS,KAA8BA,GAC1C,MAAO,GAAG,cAAsBA,EAAKC,KAAK,MAC9C,CCDO,SAASC,EAA0BC,GACtC,OAAOC,KAAKC,SAASC,IAAI,EAAWH,EACxC,CAWO,SAASI,EAGdC,GACE,MAAMC,EAAOD,EAAQC,KACrBD,EAAQE,MAAQF,EAAQE,OAAS,QACjCF,EAAQG,OAASH,EAAQG,SAAU,EAC/BH,EAAQG,SACRH,EAAQC,KAAO,EAA2BA,EAAM,QAChDD,EAAQI,KAAO,EAA2BH,EAAM,SAEhDI,MAAMC,QAAQN,EAAQO,WACtBP,EAAQO,QAAUP,EAAQO,QAAQC,QAAO,CAACD,EAASE,KAC/CF,EAAQE,GAAU,EAA2BR,EAAM,UAAWQ,GACvDF,IACR,CAAC,IAERX,KAAKC,SAASa,SAAS,EAAWT,EAAMD,EAC5C,CC7BO,SAASW,KAAYC,GACxB,IAAKjB,EAAKkB,GAAQD,EAElB,OADAjB,EAAM,GAAG,KAAaA,IAClBkB,EAAajB,KAAKkB,KAAKC,OAAOpB,EAAKkB,GAChCjB,KAAKkB,KAAKH,SAAShB,EAC9B,CC2CA,SAASqB,EAAUC,EAAcC,GAC7B,MAEMC,EAFUF,EAAqBG,cACfC,QAAQ,8BACZC,QAAQC,OAC1B,OAAOL,EAAMM,OAAOC,MAAM3B,IAAIqB,EAClC,CCrBA,SAASO,IACL9B,KAAK+B,KAAKC,aAAaC,QAC3B,CLpCS,IAAW,EKCR,2BAEZC,MAAMC,KAAK,QAAQ,KACfhC,EAAgB,CACZE,KAAM,SACN+B,KAAMC,QACNC,SAAS,EACThC,MAAO,SACPC,QAAQ,EACRgC,SAAUT,IAGd3B,EAAgB,CACZE,KAAM,QACN+B,KAAMC,QACNC,SAAS,EACThC,MAAO,SACPC,QAAQ,EACRgC,SAAUT,IAGd3B,EAAgB,CACZE,KAAM,OACN+B,KAAMC,QACNC,SAAS,EACThC,MAAO,SACPC,QAAQ,EACRgC,SAAUT,GACZ,IAGNI,MAAMM,GAAG,sBDhCF,SAA4BlB,EAAqBmB,IAKxD,SAAyBA,GACrB,IAAIC,EAAe,GACf5C,EAAoB,YAAW4C,GAAgB,MAAM3B,EAAS,iBAC9DjB,EAAoB,WAAU4C,GAAgB,MAAM3B,EAAS,gBAC7DjB,EAAoB,UAAS4C,GAAgB,MAAM3B,EAAS,eAChE0B,EAAKE,KAAK,iBAAiBC,OAAOF,EACtC,CAVIG,CAAgBJ,GAYpB,SAAmBA,EAAcnB,GAC7BmB,EAAKE,KAAK,oCAAoCG,MAAK,CAACC,EAAGC,KACnDA,EAAKC,iBAAiB,SAAS5B,GAqBvC,SAAiBA,EAAcC,GAE3B,KADmBD,EAAqB6B,SAAWpD,EAAW,UAC9C,OAEhB,MAAMqD,EAAS/B,EAAUC,EAAOC,GAC3B6B,IAEL9B,EAAM+B,iBACN/B,EAAMgC,kBACNhC,EAAMiC,2BAENH,EAAOI,MAAMtB,QAAO,GACxB,CAjCgDuB,CAAQnC,EAAOC,KAAQ,GAC/D0B,EAAKC,iBAAiB,eAAe5B,GAI7C,SAAuBA,EAAcC,GACjC,MAAMmC,EAAcpC,EAAqB6B,SAAWpD,EAAW,QACzD4D,EAAUrC,EAAqBsC,UAAY7D,EAAW,UAC5D,IAAK2D,IAAeC,EAAQ,OAE5B,MAAMP,EAAS/B,EAAUC,EAAOC,GAC3B6B,IAEL9B,EAAM+B,iBACN/B,EAAMgC,kBACNhC,EAAMiC,2BAEFG,EAAYN,EAAOS,YAClBT,EAAOU,SAChB,CAlBsDC,CAAczC,EAAOC,KAAQ,EAAK,GAExF,CAhBIyC,CAAUtB,EAAMnB,EACpB,G","sources":["webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/path.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/settings.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/localize.ts","webpack:///./src/effects.ts","webpack:///./src/main.ts"],"sourcesContent":["export let MODULE_ID = ''\r\n\r\nexport function setModuleID(id: string) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function getSettingLocalizationPath(...path: string[]) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function flagsUpdatePath(...path: string[]) {\r\n    return `flags.${MODULE_ID}.${path.join('/')}`\r\n}\r\n\r\nexport function templatePath(...path: string[]) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `modules/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function imagePath(...path: string[]) {\r\n    return `modules/${MODULE_ID}/images/${path.join('/')}`\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { getSettingLocalizationPath } from '@utils/foundry/path'\r\n\r\nexport function getSetting<T extends any>(key: string) {\r\n    return game.settings.get(MODULE_ID, key) as T\r\n}\r\n\r\nexport function setSetting(key: string, value: unknown) {\r\n    return game.settings.set(MODULE_ID, key, value)\r\n}\r\n\r\n/**\r\n * options.scope = 'world'\r\n *\r\n * options.config = false\r\n */\r\nexport function registerSetting<\r\n    TType extends number | string | boolean | object | Function,\r\n    TChoices extends Record<string, unknown> | undefined\r\n>(options: Omit<SettingRegistration<TType, TChoices>, 'choices'> & { choices?: string[] | Record<string, unknown> }) {\r\n    const name = options.name\r\n    options.scope = options.scope ?? 'world'\r\n    options.config = options.config ?? false\r\n    if (options.config) {\r\n        options.name = getSettingLocalizationPath(name, 'name')\r\n        options.hint = getSettingLocalizationPath(name, 'hint')\r\n    }\r\n    if (Array.isArray(options.choices)) {\r\n        options.choices = options.choices.reduce((choices, choice) => {\r\n            choices[choice] = getSettingLocalizationPath(name, 'choices', choice)\r\n            return choices\r\n        }, {} as Record<string, unknown>)\r\n    }\r\n    game.settings.register(MODULE_ID, name, options as SettingRegistration<TType, TChoices>)\r\n}\r\n\r\n/**\r\n * options.restricted = true\r\n *\r\n * options.icon = 'fas fa-cogs'\r\n */\r\nexport function registerSettingMenu(\r\n    options: RequiredBy<Partial<Omit<SettingSubmenuConfig, 'type'>>, 'name'> & { type: ConstructorOf<FormApplication> }\r\n) {\r\n    const name = options.name\r\n    options.name = getSettingLocalizationPath('menus', name, 'name')\r\n    options.label = getSettingLocalizationPath('menus', name, 'label')\r\n    options.hint = getSettingLocalizationPath('menus', name, 'hint')\r\n    options.restricted = options.restricted ?? true\r\n    options.icon = options.icon ?? 'fas fa-cogs'\r\n    game.settings.registerMenu(MODULE_ID, name, options as SettingSubmenuConfig)\r\n}\r\n\r\nexport function getCombatTrackerConfig() {\r\n    return game.settings.get('core', 'combatTrackerConfig') as { resource: string; skipDefeated: boolean }\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { warn, NotifyArgs, info, error } from '@utils/foundry/notification'\r\n\r\nexport type LocalizeArgs = [key: string, data?: Record<string, string | number>]\r\n\r\nexport function localize(...args: LocalizeArgs) {\r\n    let [key, data] = args\r\n    key = `${MODULE_ID}.${key}`\r\n    if (data) return game.i18n.format(key, data)\r\n    return game.i18n.localize(key)\r\n}\r\n\r\nexport function subLocalize(subKey: string) {\r\n    const fn = (...args: LocalizeArgs) => localize(`${subKey}.${args[0]}`, args[1])\r\n\r\n    Object.defineProperties(fn, {\r\n        warn: {\r\n            value: (...args: NotifyArgs) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        info: {\r\n            value: (...args: NotifyArgs) => info(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        error: {\r\n            value: (...args: NotifyArgs) => error(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n    })\r\n\r\n    return fn as ((...args: LocalizeArgs) => string) & {\r\n        warn: (...args: NotifyArgs) => void\r\n        info: (...args: NotifyArgs) => void\r\n        error: (...args: NotifyArgs) => void\r\n    }\r\n}\r\n","import { getSetting } from '@utils/foundry/settings'\r\nimport { localize } from '@utils/foundry/localize'\r\n\r\nexport function renderEffectsPanel(panel: EffectsPanel, html: JQuery) {\r\n    addInstructions(html)\r\n    setEvents(html, panel)\r\n}\r\n\r\nfunction addInstructions(html: JQuery) {\r\n    let instructions = ''\r\n    if (getSetting<boolean>('remove')) instructions += `<p>${localize('remove')}</p>`\r\n    if (getSetting<boolean>('sheet')) instructions += `<p>${localize('sheet')}</p>`\r\n    if (getSetting<boolean>('chat')) instructions += `<p>${localize('chat')}</p>`\r\n    html.find('.instructions').append(instructions)\r\n}\r\n\r\nfunction setEvents(html: JQuery, panel: EffectsPanel) {\r\n    html.find('.effect-item[data-item-id] .icon').each((i, icon) => {\r\n        icon.addEventListener('click', event => onClick(event, panel), true)\r\n        icon.addEventListener('contextmenu', event => onContextMenu(event, panel), true)\r\n    })\r\n}\r\n\r\nfunction onContextMenu(event: Event, panel: EffectsPanel) {\r\n    const sendToChat = (event as MouseEvent).ctrlKey && getSetting('chat')\r\n    const remove = (event as MouseEvent).shiftKey && getSetting('remove')\r\n    if (!sendToChat && !remove) return\r\n\r\n    const effect = getEffect(event, panel)\r\n    if (!effect) return\r\n\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n    event.stopImmediatePropagation()\r\n\r\n    if (sendToChat) effect.toMessage()\r\n    else effect.delete()\r\n}\r\n\r\nfunction onClick(event: Event, panel: EffectsPanel) {\r\n    const openSheet = (event as MouseEvent).ctrlKey && getSetting('sheet')\r\n    if (!openSheet) return\r\n\r\n    const effect = getEffect(event, panel)\r\n    if (!effect) return\r\n\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n    event.stopImmediatePropagation()\r\n\r\n    effect.sheet.render(true)\r\n}\r\n\r\nfunction getEffect(event: Event, panel: EffectsPanel) {\r\n    const target = (event as MouseEvent).currentTarget as HTMLElement\r\n    const effect = target.closest('.effect-item[data-item-id]') as HTMLElement\r\n    const id = effect.dataset.itemId!\r\n    return panel.actor?.items.get(id)\r\n}\r\n","import { setModuleID } from '@utils/module'\r\nimport { registerSetting } from '@utils/foundry/settings'\r\nimport { renderEffectsPanel } from './effects'\r\n\r\nsetModuleID('pf2e-effect-description')\r\n\r\nHooks.once('init', () => {\r\n    registerSetting({\r\n        name: 'remove',\r\n        type: Boolean,\r\n        default: true,\r\n        scope: 'client',\r\n        config: true,\r\n        onChange: refreshEffectsPanel,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'sheet',\r\n        type: Boolean,\r\n        default: true,\r\n        scope: 'client',\r\n        config: true,\r\n        onChange: refreshEffectsPanel,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'chat',\r\n        type: Boolean,\r\n        default: true,\r\n        scope: 'client',\r\n        config: true,\r\n        onChange: refreshEffectsPanel,\r\n    })\r\n})\r\n\r\nHooks.on('renderEffectsPanel', renderEffectsPanel)\r\n\r\nfunction refreshEffectsPanel() {\r\n    game.pf2e.effectPanel?.render()\r\n}\r\n"],"names":["path","join","getSetting","key","game","settings","get","registerSetting","options","name","scope","config","hint","Array","isArray","choices","reduce","choice","register","localize","args","data","i18n","format","getEffect","event","panel","id","currentTarget","closest","dataset","itemId","actor","items","refreshEffectsPanel","pf2e","effectPanel","render","Hooks","once","type","Boolean","default","onChange","on","html","instructions","find","append","addInstructions","each","i","icon","addEventListener","ctrlKey","effect","preventDefault","stopPropagation","stopImmediatePropagation","sheet","onClick","sendToChat","remove","shiftKey","toMessage","delete","onContextMenu","setEvents"],"sourceRoot":""}